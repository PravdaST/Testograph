'use client';

import React, { useState, useEffect } from 'react';
import { Check, ArrowRight, Star, Flame, Gift, Shield, Clock, AlertCircle, TrendingUp, Zap } from 'lucide-react';
import AnimatedBackground from '../shared/AnimatedBackground';
import GradientText from '../shared/GradientText';
import GlassCard from '../shared/GlassCard';

export default function PricingV2() {
  // Countdown Timer State (24 hours from first visit)
  const [timeLeft, setTimeLeft] = useState({
    hours: 23,
    minutes: 59,
    seconds: 59
  });

  // Scarcity Counters (simulated limited inventory)
  const [inventory, setInventory] = useState({
    starter: 52,
    performance: 23,
    complete: 14
  });

  // Check if first-time visitor
  const [isFirstTimeVisitor, setIsFirstTimeVisitor] = useState(false);

  useEffect(() => {
    // Check if first visit
    const hasVisited = localStorage.getItem('testograph_visited');
    if (!hasVisited) {
      setIsFirstTimeVisitor(true);
      localStorage.setItem('testograph_visited', 'true');
    }

    // Countdown timer logic
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        let { hours, minutes, seconds } = prev;

        if (seconds > 0) {
          seconds--;
        } else if (minutes > 0) {
          minutes--;
          seconds = 59;
        } else if (hours > 0) {
          hours--;
          minutes = 59;
          seconds = 59;
        }

        return { hours, minutes, seconds };
      });
    }, 1000);

    // Simulate inventory decrease (every 3-7 minutes a unit sells)
    const inventoryTimer = setInterval(() => {
      setInventory(prev => ({
        starter: Math.max(35, prev.starter - Math.floor(Math.random() * 2)),
        performance: Math.max(15, prev.performance - Math.floor(Math.random() * 2)),
        complete: Math.max(8, prev.complete - Math.floor(Math.random() * 2))
      }));
    }, 180000); // 3 minutes

    return () => {
      clearInterval(timer);
      clearInterval(inventoryTimer);
    };
  }, []);

  const packages = [
    {
      id: 'starter',
      name: 'STARTER',
      subtitle: '–ó–∞–ø–æ—á–Ω–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ',
      price: 67,
      originalValue: 214,
      perDay: 2.23,
      duration: '30 –¥–Ω–∏',
      quantity: '1x TESTOUP (30 –¥–æ–∑–∏)',
      badge: null,
      features: [
        '1x TESTOUP –¥–æ–±–∞–≤–∫–∞ (30 –¥–æ–∑–∏)',
        '–î–æ—Å—Ç—ä–ø –¥–æ TESTOGRAPH —Å–∏—Å—Ç–µ–º–∞',
        '4 –≥–æ—Ç–æ–≤–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
        '–ï–∂–µ–¥–Ω–µ–≤–µ–Ω —á–µ–∫-–∏–Ω',
        '–ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞–ø—Ä–µ–¥—ä–∫',
        'Telegram –æ–±—â–Ω–æ—Å—Ç'
      ],
      bonuses: null,
      forWho: [
        '–ò—Å–∫–∞—à –¥–∞ —Ç–µ—Å—Ç–≤–∞—à –¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ —Ä–∞–±–æ—Ç–∏',
        '–ò–º–∞—à –≤–µ—á–µ –æ–ø–∏—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        '–ò—Å–∫–∞—à –º–∏–Ω–∏–º–∞–ª–Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è'
      ]
    },
    {
      id: 'performance',
      name: 'PERFORMANCE',
      subtitle: '–£—Å–∫–æ—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ',
      price: 127,
      originalValue: 526,
      savings: 399,
      savingsPercent: 76,
      perDay: 2.12,
      duration: '60 –¥–Ω–∏',
      quantity: '2x TESTOUP (60 –¥–æ–∑–∏)',
      badge: { icon: Star, text: '–ü–û–ü–£–õ–Ø–†–ï–ù', color: 'from-amber-500 to-orange-500' },
      features: [
        '2x TESTOUP –¥–æ–±–∞–≤–∫–∞ (60 –¥–æ–∑–∏ = 2 –º–µ—Å–µ—Ü–∞)',
        '–î–æ—Å—Ç—ä–ø –¥–æ TESTOGRAPH —Å–∏—Å—Ç–µ–º–∞',
        '4 –≥–æ—Ç–æ–≤–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
        '–ï–∂–µ–¥–Ω–µ–≤–µ–Ω —á–µ–∫-–∏–Ω',
        '–ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞–ø—Ä–µ–¥—ä–∫',
        'Telegram –æ–±—â–Ω–æ—Å—Ç'
      ],
      bonuses: [
        {
          title: 'NUTRITION TRACKER APP',
          items: [
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±—Ä–æ–µ–Ω–µ –Ω–∞ –∫–∞–ª–æ—Ä–∏–∏',
            '–ú–∞–∫—Ä–æ—Å tracking (–ø—Ä–æ—Ç–µ–∏–Ω/–≤—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏/–º–∞–∑–Ω–∏–Ω–∏)',
            'Barcode scanner –∑–∞ —Ö—Ä–∞–Ω–∏',
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω–∏ —Å 500+ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ö—Ä–∞–Ω–∏'
          ]
        },
        {
          title: 'TRAINING TRACKER APP',
          items: [
            '–õ–æ–≥–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å–µ—Ç–æ–≤–µ/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è/—Ç–µ–∂–µ—Å—Ç)',
            '–ü—Ä–æ–≥—Ä–µ—Å–∏–≤–µ–Ω overload –∫–∞–ª–∫—É–ª–∞—Ç–æ—Ä',
            '–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            '–ü–µ—Ä—Å–æ–Ω–∞–ª–Ω–∏ —Ä–µ–∫–æ—Ä–¥–∏ (PRs)'
          ]
        }
      ],
      forWho: [
        '–°–µ—Ä–∏–æ–∑–µ–Ω —Å–∏ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ',
        '–ò—Å–∫–∞—à –¥–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞—à –≤—Å–∏—á–∫–æ —Ç–æ—á–Ω–æ',
        '2 –º–µ—Å–µ—Ü–∞ = –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –≤–∏–¥–∏–º–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏'
      ]
    },
    {
      id: 'complete',
      name: 'COMPLETE SYSTEM',
      subtitle: '–ü—ä–ª–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è',
      price: 179,
      originalValue: 887,
      savings: 708,
      savingsPercent: 80,
      perDay: 1.99,
      duration: '90 –¥–Ω–∏',
      quantity: '3x TESTOUP (90 –¥–æ–∑–∏)',
      badge: { icon: Flame, text: 'MAX VALUE', color: 'from-red-500 to-orange-500' },
      features: [
        '3x TESTOUP –¥–æ–±–∞–≤–∫–∞ (90 –¥–æ–∑–∏ = 3 –º–µ—Å–µ—Ü–∞)',
        '–î–æ—Å—Ç—ä–ø –¥–æ TESTOGRAPH —Å–∏—Å—Ç–µ–º–∞',
        '4 –≥–æ—Ç–æ–≤–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
        '–ï–∂–µ–¥–Ω–µ–≤–µ–Ω —á–µ–∫-–∏–Ω',
        '–ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞–ø—Ä–µ–¥—ä–∫',
        'Telegram –æ–±—â–Ω–æ—Å—Ç'
      ],
      bonuses: [
        {
          title: 'NUTRITION TRACKER APP',
          items: ['–ö–∞–ª–æ—Ä–∏–∏ + –º–∞–∫—Ä–æ—Å tracking', 'Barcode scanner, 500+ —Ö—Ä–∞–Ω–∏']
        },
        {
          title: 'TRAINING TRACKER APP',
          items: ['–õ–æ–≥–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'Progressive overload tracking']
        },
        {
          title: 'SLEEP OPTIMIZER APP',
          items: ['Sleep tracking –∏ –∞–Ω–∞–ª–∏–∑', '–°—É—Ç—Ä–µ—à–µ–Ω readiness score', '–ü—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ']
        },
        {
          title: 'BODY METRICS APP',
          items: ['–¢–µ–≥–ª–æ, –º—É—Å–∫—É–ª–Ω–∞ –º–∞—Å–∞, –º–∞–∑–Ω–∏–Ω–∏', 'Progress photos —Å overlay comparison', '–û–±–∏–∫–æ–ª–∫–∏ (–≥—ä—Ä–¥–∏, —Ä—ä—Ü–µ, –∫—Ä–∞–∫–∞, —Ç–∞–ª–∏—è)']
        },
        {
          title: 'SUPPLEMENT SCHEDULER APP',
          items: ['–ù–∞–ø–æ–º–Ω—è–Ω–∏—è –∫–æ–≥–∞ –¥–∞ –≤–∑–µ–º–µ—à –∫–∞–∫–≤–æ', '–û–ø—Ç–∏–º–∞–ª–µ–Ω timing –∑–∞ –≤—Å—è–∫–∞ –¥–æ–±–∞–≤–∫–∞', 'Tracker –∑–∞ —Å—ä—á–µ—Ç–∞–≤–∞–Ω–µ —Å —Ö—Ä–∞–Ω–∞']
        }
      ],
      extras: [
        '–ë–ï–ó–ü–õ–ê–¢–ù–ê –¥–æ—Å—Ç–∞–≤–∫–∞',
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞'
      ],
      forWho: [
        '–ò—Å–∫–∞—à –ü–™–õ–ù–ê —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è',
        '–°–µ—Ä–∏–æ–∑–µ–Ω —Å–∏ –∑–∞ –¥—ä–ª–≥–æ—Å—Ä–æ—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏',
        '–ò—Å–∫–∞—à –í–°–ò–ß–ö–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
        '3 –º–µ—Å–µ—Ü–∞ = –ø–æ—Å—Ç–æ—è–Ω–Ω–∞ –ø—Ä–æ–º—è–Ω–∞'
      ]
    }
  ];

  const getInventoryByPackageId = (id: string) => {
    if (id === 'starter') return inventory.starter;
    if (id === 'performance') return inventory.performance;
    if (id === 'complete') return inventory.complete;
    return 0;
  };

  const getInventoryColor = (stock: number) => {
    if (stock <= 10) return 'text-red-600 dark:text-red-400';
    if (stock <= 20) return 'text-orange-600 dark:text-orange-400';
    return 'text-amber-600 dark:text-amber-400';
  };

  const getInventoryBarColor = (stock: number) => {
    if (stock <= 10) return 'bg-red-500';
    if (stock <= 20) return 'bg-orange-500';
    return 'bg-amber-500';
  };

  return (
    <section id="pricing" className="relative py-20 md:py-32 overflow-hidden bg-gradient-to-br from-background via-primary/5 to-background">
      <AnimatedBackground variant="mixed" opacity={0.1} />

      <div className="container mx-auto px-4 relative z-10">
        <div className="max-w-7xl mx-auto space-y-12">

          {/* Countdown Timer - URGENT */}
          <div className="max-w-4xl mx-auto">
            <div className="bg-gradient-to-r from-red-600 via-orange-600 to-amber-600 text-white rounded-3xl p-6 md:p-8 shadow-2xl border-2 border-white/20">
              <div className="text-center space-y-4">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <AlertCircle className="w-6 h-6 animate-pulse" />
                  <p className="text-sm md:text-base font-bold uppercase tracking-wide">
                    {isFirstTimeVisitor ? 'üéÅ –ü–™–†–í–ê –ü–û–†–™–ß–ö–ê –ë–û–ù–£–°' : '‚ö° –û–ì–†–ê–ù–ò–ß–ï–ù–ê –û–§–ï–†–¢–ê'}
                  </p>
                </div>

                <h3 className="text-2xl md:text-4xl font-bold">
                  {isFirstTimeVisitor
                    ? '–°–ø–µ—Ü–∏–∞–ª–Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –ø—ä—Ä–≤–∞ –ø–æ—Ä—ä—á–∫–∞ –∏–∑—Ç–∏—á–∞ —Å–ª–µ–¥:'
                    : '–¢–µ–∫—É—â–∏—Ç–µ —Ü–µ–Ω–∏ –≤–∞–ª–∏–¥–Ω–∏ –æ—â–µ:'}
                </h3>

                {/* Timer Display */}
                <div className="flex items-center justify-center gap-3 md:gap-6">
                  {[
                    { value: timeLeft.hours, label: '–ß–ê–°–ê' },
                    { value: timeLeft.minutes, label: '–ú–ò–ù–£–¢–ò' },
                    { value: timeLeft.seconds, label: '–°–ï–ö–£–ù–î–ò' }
                  ].map((unit, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <div className="bg-white/20 backdrop-blur-sm rounded-xl px-4 md:px-6 py-3 md:py-4 border-2 border-white/30">
                        <div className="text-4xl md:text-6xl font-bold tabular-nums">
                          {String(unit.value).padStart(2, '0')}
                        </div>
                        <div className="text-xs md:text-sm font-semibold opacity-90 mt-1">
                          {unit.label}
                        </div>
                      </div>
                      {idx < 2 && <div className="text-3xl md:text-5xl font-bold">:</div>}
                    </div>
                  ))}
                </div>

                <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 max-w-2xl mx-auto">
                  <p className="text-sm md:text-base font-semibold">
                    {isFirstTimeVisitor
                      ? 'üéØ –°–ª–µ–¥ –∏–∑—Ç–∏—á–∞–Ω–µ –Ω–∞ —Ç–∞–π–º–µ—Ä–∞ —Ü–µ–Ω–∏—Ç–µ —Å–µ –≤—Ä—ä—â–∞—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª–Ω–∏—Ç–µ.'
                      : '‚ö†Ô∏è –°–ª–µ–¥–≤–∞—â batch –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –µ —Å–ª–µ–¥ 3 —Å–µ–¥–º–∏—Ü–∏. –¢–µ–∫—É—â–∏—Ç–µ —Ü–µ–Ω–∏ –≤–∞–∂–∞—Ç —Å–∞–º–æ –∑–∞ —Ç–æ–∑–∏ batch.'}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Header */}
          <div className="text-center space-y-4">
            <div className="inline-flex items-center gap-2 bg-red-600/20 backdrop-blur-sm border-2 border-red-600/40 rounded-full px-6 py-3 mb-4 animate-pulse">
              <Flame className="w-5 h-5 text-red-600 dark:text-red-400" />
              <span className="text-sm font-bold text-red-600 dark:text-red-400">–û–ì–†–ê–ù–ò–ß–ï–ù–ê –ù–ê–õ–ò–ß–ù–û–°–¢</span>
            </div>

            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold">
              <GradientText from="from-red-600" via="via-orange-600" to="to-amber-600">
                –ü–û–°–õ–ï–î–ù–ò–¢–ï –ü–ê–ö–ï–¢–ò –û–¢ –¢–û–ó–ò BATCH
              </GradientText>
            </h2>

            <p className="text-xl text-foreground font-semibold max-w-2xl mx-auto">
              –ü—Ä–æ–∏–∑–≤–µ–∂–¥–∞–º–µ –Ω–∞ –ø–∞—Ä—Ç–∏–¥–∏. –°–ª–µ–¥–≤–∞—â–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 3 —Å–µ–¥–º–∏—Ü–∏.
            </p>

            <div className="flex flex-wrap justify-center gap-4 text-sm">
              <div className="flex items-center gap-2 bg-green-500/10 border border-green-500/20 rounded-full px-4 py-2">
                <Shield className="w-4 h-4 text-green-600 dark:text-green-400" />
                <span className="font-semibold text-green-600 dark:text-green-400">30 –¥–Ω–∏ –≥–∞—Ä–∞–Ω—Ü–∏—è</span>
              </div>
              <div className="flex items-center gap-2 bg-blue-500/10 border border-blue-500/20 rounded-full px-4 py-2">
                <TrendingUp className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                <span className="font-semibold text-blue-600 dark:text-blue-400">94% –≤–∏–∂–¥–∞—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç–∏</span>
              </div>
            </div>
          </div>

          {/* Pricing Cards */}
          <div className="grid lg:grid-cols-3 gap-8">
            {packages.map((pkg, index) => {
              const isPopular = pkg.badge?.text === '–ü–û–ü–£–õ–Ø–†–ï–ù';
              const isBestValue = pkg.badge?.text === 'MAX VALUE';
              const stock = getInventoryByPackageId(pkg.id);
              const stockPercent = (stock / 60) * 100; // Assuming max was 60

              return (
                <div key={pkg.id} className={`relative ${isPopular || isBestValue ? 'lg:-mt-4 lg:mb-4' : ''}`}>
                  {/* Badge */}
                  {pkg.badge && (
                    <div className={`absolute -top-4 left-1/2 -translate-x-1/2 z-10 bg-gradient-to-r ${pkg.badge.color} text-white px-6 py-2 rounded-full font-bold text-sm shadow-lg flex items-center gap-2 whitespace-nowrap`}>
                      <pkg.badge.icon className="w-4 h-4" />
                      {pkg.badge.text}
                    </div>
                  )}

                  <GlassCard
                    className={`p-8 h-full flex flex-col ${isPopular || isBestValue ? 'border-primary/50 shadow-2xl shadow-primary/20' : ''} ${stock <= 10 ? 'border-red-500/50' : ''}`}
                  >
                    {/* Inventory Warning - TOP */}
                    <div className="mb-4 -mt-2">
                      <div className={`bg-gradient-to-r ${stock <= 10 ? 'from-red-600/20 to-orange-600/20 border-red-600/40' : stock <= 20 ? 'from-orange-600/20 to-amber-600/20 border-orange-600/40' : 'from-amber-600/20 to-yellow-600/20 border-amber-600/40'} backdrop-blur-sm border-2 rounded-xl p-3`}>
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <AlertCircle className={`w-4 h-4 ${getInventoryColor(stock)} ${stock <= 10 ? 'animate-pulse' : ''}`} />
                            <span className={`text-sm font-bold ${getInventoryColor(stock)}`}>
                              {stock <= 10 ? 'üî• –ü–û–ß–¢–ò –ò–ó–ß–ï–†–ü–ê–ù' : stock <= 20 ? '‚ö†Ô∏è –ú–ê–õ–ö–û –ù–ê –°–ö–õ–ê–î' : 'üì¶ –û–ì–†–ê–ù–ò–ß–ï–ù'}
                            </span>
                          </div>
                          <span className={`text-sm font-bold ${getInventoryColor(stock)}`}>
                            –°–∞–º–æ {stock} –±—Ä
                          </span>
                        </div>
                        {/* Stock Bar */}
                        <div className="h-2 bg-neutral-200 dark:bg-neutral-800 rounded-full overflow-hidden">
                          <div
                            className={`h-full ${getInventoryBarColor(stock)} transition-all duration-1000`}
                            style={{ width: `${stockPercent}%` }}
                          />
                        </div>
                      </div>
                    </div>

                    {/* Header */}
                    <div className="text-center mb-6">
                      <h3 className="text-2xl font-bold text-foreground mb-2">{pkg.name}</h3>
                      <p className="text-muted-foreground">{pkg.subtitle}</p>
                    </div>

                    {/* Price */}
                    <div className="text-center mb-6 pb-6 border-b border-border/50">
                      <div className="text-5xl font-bold mb-2">
                        <GradientText>{pkg.price} –ª–≤</GradientText>
                      </div>
                      <p className="text-sm text-muted-foreground mb-1">{pkg.perDay} –ª–≤/–¥–µ–Ω</p>
                      <p className="text-sm text-muted-foreground">–∑–∞ {pkg.duration}</p>

                      {pkg.savings && (
                        <div className="mt-3 inline-block bg-green-500/10 border border-green-500/20 rounded-full px-4 py-1">
                          <p className="text-sm font-bold text-green-600 dark:text-green-400">
                            –°–ø–µ—Å—Ç—è–≤–∞—à {pkg.savings} –ª–≤ ({pkg.savingsPercent}%)
                          </p>
                        </div>
                      )}
                    </div>

                    {/* Features */}
                    <div className="flex-1 space-y-4 mb-6">
                      {pkg.features.map((feature, idx) => (
                        <div key={idx} className="flex items-start gap-3">
                          <Check className="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" />
                          <span className="text-sm text-foreground">{feature}</span>
                        </div>
                      ))}

                      {/* Bonuses */}
                      {pkg.bonuses && (
                        <div className="mt-6 pt-6 border-t border-border/50">
                          <div className="flex items-center gap-2 mb-4 text-primary font-bold">
                            <Gift className="w-5 h-5" />
                            <span>–ë–û–ù–£–° APPS:</span>
                          </div>
                          {pkg.bonuses.map((bonus, idx) => (
                            <div key={idx} className="mb-4 bg-primary/5 rounded-lg p-3">
                              <p className="font-semibold text-sm text-foreground mb-2">{bonus.title}</p>
                              <div className="space-y-1">
                                {bonus.items.map((item, i) => (
                                  <p key={i} className="text-xs text-muted-foreground">‚Üí {item}</p>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}

                      {/* Extras */}
                      {pkg.extras && (
                        <div className="mt-4 space-y-2">
                          {pkg.extras.map((extra, idx) => (
                            <div key={idx} className="flex items-center gap-2 bg-amber-500/10 rounded-lg px-3 py-2">
                              <Gift className="w-4 h-4 text-amber-600 dark:text-amber-400" />
                              <span className="text-sm font-semibold text-amber-600 dark:text-amber-400">{extra}</span>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Urgency Message Before CTA */}
                    {stock <= 15 && (
                      <div className="mb-4 bg-red-500/10 border border-red-500/20 rounded-lg p-3 text-center">
                        <p className="text-sm font-bold text-red-600 dark:text-red-400 flex items-center justify-center gap-2">
                          <Clock className="w-4 h-4 animate-pulse" />
                          {stock <= 10
                            ? '–ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü–∏! –ü–æ—Ä—ä—á–∞–π –°–ï–ì–ê.'
                            : '–ò–∑—á–µ—Ä–ø–≤–∞ —Å–µ –±—ä—Ä–∑–æ. –ù–µ –≥—É–±–∏ –º–æ–º–µ–Ω—Ç–∞.'}
                        </p>
                      </div>
                    )}

                    {/* CTA Button */}
                    <button
                      className={`w-full py-4 rounded-xl font-bold text-lg flex items-center justify-center gap-2 transition-all duration-300 ${
                        isPopular || isBestValue
                          ? 'bg-gradient-to-r from-primary to-blue-600 text-white shadow-lg hover:shadow-xl hover:scale-105'
                          : 'bg-card border-2 border-border text-foreground hover:border-primary/50 hover:bg-primary/5'
                      } ${stock <= 10 ? 'animate-pulse' : ''}`}
                    >
                      <span>
                        {stock <= 10 ? 'üî• –•–í–ê–ù–ò –ü–û–°–õ–ï–î–ï–ù' : '–ò–∑–±–∏—Ä–∞–º ' + pkg.name}
                      </span>
                      <ArrowRight className="w-5 h-5" />
                    </button>

                    {/* Urgency Reinforcement */}
                    {isFirstTimeVisitor && (
                      <div className="mt-3 bg-green-500/10 border border-green-500/20 rounded-lg p-2 text-center">
                        <p className="text-xs font-semibold text-green-600 dark:text-green-400">
                          ‚úì –ü—ä—Ä–≤–∞ –ø–æ—Ä—ä—á–∫–∞ –±–æ–Ω—É—Å –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –æ—â–µ {timeLeft.hours}—á {timeLeft.minutes}–º
                        </p>
                      </div>
                    )}

                    {/* Value Statement */}
                    <div className="mt-4 text-center space-y-1">
                      <p className="text-xs text-muted-foreground">
                        –°—Ç–æ–π–Ω–æ—Å—Ç: <span className="line-through">{pkg.originalValue} –ª–≤</span>
                      </p>
                      {stock <= 20 && (
                        <p className="text-xs font-bold text-red-600 dark:text-red-400">
                          ‚ö†Ô∏è –°–ª–µ–¥ –∏–∑—á–µ—Ä–ø–≤–∞–Ω–µ: 3 —Å–µ–¥–º–∏—Ü–∏ –∏–∑—á–∞–∫–≤–∞–Ω–µ
                        </p>
                      )}
                    </div>
                  </GlassCard>
                </div>
              );
            })}
          </div>

          {/* Package Guidance */}
          <div>
            <h3 className="text-2xl md:text-3xl font-bold text-center mb-8">
              <GradientText>–ö–û–ô –ü–ê–ö–ï–¢ –ï –ó–ê –¢–ï–ë?</GradientText>
            </h3>

            <div className="grid md:grid-cols-3 gap-6">
              {packages.map((pkg) => (
                <GlassCard key={pkg.id} className="p-6">
                  <h4 className="text-xl font-bold text-foreground mb-4 flex items-center gap-2">
                    {pkg.name} ({pkg.price} –ª–≤)
                    {pkg.badge && <pkg.badge.icon className="w-5 h-5 text-primary" />}
                  </h4>
                  <div className="space-y-2">
                    {pkg.forWho.map((item, idx) => (
                      <div key={idx} className="flex items-start gap-2">
                        <ArrowRight className="w-4 h-4 text-primary flex-shrink-0 mt-0.5" />
                        <span className="text-sm text-muted-foreground">{item}</span>
                      </div>
                    ))}
                  </div>
                </GlassCard>
              ))}
            </div>
          </div>

          {/* Trust Badges */}
          <div className="flex flex-wrap justify-center items-center gap-8 pt-8 border-t border-border/50">
            {[
              { icon: Shield, label: '30-–¥–Ω–µ–≤–Ω–∞ –≥–∞—Ä–∞–Ω—Ü–∏—è' },
              { icon: Gift, label: '–ë–µ–∑–ø–ª–∞—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞' },
              { icon: Check, label: '–°–∏–≥—É—Ä–Ω–æ –ø–ª–∞—â–∞–Ω–µ' }
            ].map((badge, idx) => {
              const Icon = badge.icon;
              return (
                <div key={idx} className="flex items-center gap-2 text-muted-foreground">
                  <Icon className="w-5 h-5 text-primary" />
                  <span className="text-sm">{badge.label}</span>
                </div>
              );
            })}
          </div>

        </div>
      </div>
    </section>
  );
}
