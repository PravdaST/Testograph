/**
 * Testosterone Assessment Scoring System
 *
 * Calculates a risk score (0-100) based on user inputs
 * Higher score = Higher risk / Lower testosterone likelihood
 */

export interface QuizData {
  age: number;
  weight: number;
  height: number;
  trainingFrequency: string;
  trainingType: string[];
  supplements: string;
  averageSleep: number;
  diet: string;
  alcohol: number;
  nicotine: string;
  libido: string;
  morningErection: string;
  morningEnergy: string;
  recovery: string;
  mood: string;
}

export interface ScoringResult {
  totalScore: number; // 0-100
  level: 'good' | 'moderate' | 'critical'; // good: 0-30, moderate: 31-60, critical: 61-100
  riskFactors: string[];
  topIssues: string[];
  recommendedTier: 'premium' | 'regular' | 'digital';
  estimatedTestosterone: {
    value: number; // nmol/L
    level: 'low' | 'normal' | 'high';
    unit: 'nmol/L';
  };
}

/**
 * Calculate testosterone risk score
 */
export function calculateTestosteroneScore(data: QuizData): ScoringResult {
  let score = 0;
  const riskFactors: string[] = [];
  const topIssues: string[] = [];

  // === HEALTH INDICATORS (50 points max) ===

  // Libido (0-25 points)
  if (data.libido === 'very-low') {
    score += 25;
    riskFactors.push('–ú–Ω–æ–≥–æ –Ω–∏—Å–∫–æ –ª–∏–±–∏–¥–æ');
    topIssues.push('–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏—Å–∫–æ –ª–∏–±–∏–¥–æ');
  } else if (data.libido === 'low') {
    score += 15;
    riskFactors.push('–ù–∏—Å–∫–æ –ª–∏–±–∏–¥–æ');
    topIssues.push('–ù–∞–º–∞–ª–µ–Ω–æ –ª–∏–±–∏–¥–æ');
  }

  // Morning Erection (0-20 points)
  if (data.morningErection === 'never') {
    score += 20;
    riskFactors.push('–õ–∏–ø—Å–∞ –Ω–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –µ—Ä–µ–∫—Ü–∏—è');
    topIssues.push('–ù—è–º–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –µ—Ä–µ–∫—Ü–∏—è');
  } else if (data.morningErection === 'rarely') {
    score += 10;
    riskFactors.push('–†—è–¥–∫–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –µ—Ä–µ–∫—Ü–∏—è');
  }

  // Morning Energy (0-15 points)
  if (data.morningEnergy === 'very-low') {
    score += 15;
    riskFactors.push('–ú–Ω–æ–≥–æ –Ω–∏—Å–∫–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è');
    topIssues.push('–•—Ä–æ–Ω–∏—á–Ω–∞ —É–º–æ—Ä–∞');
  } else if (data.morningEnergy === 'low') {
    score += 10;
    riskFactors.push('–ù–∏—Å–∫–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è');
  }

  // === LIFESTYLE FACTORS (30 points max) ===

  // Sleep (0-15 points)
  if (data.averageSleep < 5) {
    score += 15;
    riskFactors.push('–ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–∫–æ —Å—ä–Ω (–ø–æ–¥ 5 —á–∞—Å–∞)');
    topIssues.push('–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–µ–Ω —Å—ä–Ω');
  } else if (data.averageSleep < 6.5) {
    score += 10;
    riskFactors.push('–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–µ–Ω —Å—ä–Ω (–ø–æ–¥ 6.5 —á–∞—Å–∞)');
  }

  // Alcohol (0-10 points)
  if (data.alcohol > 14) {
    score += 10;
    riskFactors.push('–í–∏—Å–æ–∫–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –Ω–∞ –∞–ª–∫–æ—Ö–æ–ª (14+ –ø–∏—Ç–∏–µ—Ç–∞/—Å–µ–¥–º–∏—Ü–∞)');
  } else if (data.alcohol > 7) {
    score += 5;
    riskFactors.push('–£–º–µ—Ä–µ–Ω–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –Ω–∞ –∞–ª–∫–æ—Ö–æ–ª (7+ –ø–∏—Ç–∏–µ—Ç–∞/—Å–µ–¥–º–∏—Ü–∞)');
  }

  // Nicotine (0-5 points)
  if (data.nicotine !== 'none') {
    score += 5;
    riskFactors.push(`–£–ø–æ—Ç—Ä–µ–±–∞ –Ω–∞ ${data.nicotine === 'cigarettes' ? '—Ü–∏–≥–∞—Ä–∏' : data.nicotine === 'iqos' ? 'IQOS' : '–≤–µ–π–ø'}`);
  }

  // === PHYSICAL INDICATORS (20 points max) ===

  // Mood (0-10 points)
  if (data.mood === 'negative') {
    score += 10;
    riskFactors.push('–ù–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ');
    topIssues.push('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –¥–∏—Å—Ç—Ä–µ—Å');
  } else if (data.mood === 'variable') {
    score += 5;
    riskFactors.push('–ü—Ä–æ–º–µ–Ω–ª–∏–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ');
  }

  // Training frequency (0-10 points)
  if (data.trainingFrequency === 'none') {
    score += 10;
    riskFactors.push('–õ–∏–ø—Å–∞ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç');
  } else if (data.trainingFrequency === '1-2') {
    score += 5;
    riskFactors.push('–ù–∏—Å–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç (1-2 –ø—ä—Ç–∏/—Å–µ–¥–º–∏—Ü–∞)');
  }

  // Recovery (0-5 points)
  if (data.recovery === 'very-slow') {
    score += 5;
    riskFactors.push('–ú–Ω–æ–≥–æ –±–∞–≤–Ω–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ');
  } else if (data.recovery === 'slow') {
    score += 3;
    riskFactors.push('–ë–∞–≤–Ω–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ');
  }

  // Determine level
  let level: 'good' | 'moderate' | 'critical';
  if (score >= 61) {
    level = 'critical';
  } else if (score >= 31) {
    level = 'moderate';
  } else {
    level = 'good';
  }

  // Determine recommended tier based on score
  let recommendedTier: 'premium' | 'regular' | 'digital';
  if (score >= 61) {
    recommendedTier = 'premium'; // Critical needs full support
  } else if (score >= 31) {
    recommendedTier = 'regular'; // Moderate needs supplement + plan
  } else {
    recommendedTier = 'digital'; // Good just needs maintenance plan
  }

  // Calculate estimated testosterone in nmol/L
  // Inverse relationship: higher risk score = lower testosterone
  // Formula: 28 - (score * 0.2)
  // Score 0 ‚Üí ~28 nmol/L (high)
  // Score 30 ‚Üí ~22 nmol/L (normal)
  // Score 60 ‚Üí ~16 nmol/L (normal)
  // Score 80 ‚Üí ~12 nmol/L (borderline)
  // Score 100 ‚Üí ~8 nmol/L (low)
  const cappedScore = Math.min(score, 100);
  const estimatedValue = Math.round((28 - (cappedScore * 0.2)) * 10) / 10; // Round to 1 decimal

  let testosteroneLevel: 'low' | 'normal' | 'high';
  if (estimatedValue < 12) {
    testosteroneLevel = 'low';
  } else if (estimatedValue > 26) {
    testosteroneLevel = 'high';
  } else {
    testosteroneLevel = 'normal';
  }

  return {
    totalScore: Math.min(score, 100), // Cap at 100
    level,
    riskFactors,
    topIssues: topIssues.slice(0, 3), // Top 3 only
    recommendedTier,
    estimatedTestosterone: {
      value: estimatedValue,
      level: testosteroneLevel,
      unit: 'nmol/L'
    }
  };
}

/**
 * Get level description
 */
export function getLevelDescription(level: 'good' | 'moderate' | 'critical'): {
  title: string;
  description: string;
  color: string;
  emoji: string;
} {
  switch (level) {
    case 'critical':
      return {
        title: '–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–≤–æ',
        description: '–¢–≤–æ–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º–∏ —Å–∞ —Å–µ—Ä–∏–æ–∑–Ω–∏ –∏ –∏–∑–∏—Å–∫–≤–∞—Ç –Ω–µ–∑–∞–±–∞–≤–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–∏–≤–∞—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ –ø–æ–¥ –Ω–æ—Ä–º–∞—Ç–∞.',
        color: 'text-red-500',
        emoji: 'üî¥'
      };
    case 'moderate':
      return {
        title: '–£–º–µ—Ä–µ–Ω–æ –Ω–∏–≤–æ',
        description: '–ò–º–∞ –ø—Ä–∏–∑–Ω–∞—Ü–∏ –Ω–∞ –Ω–∞–º–∞–ª–µ–Ω–∏ –Ω–∏–≤–∞ –Ω–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω. –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ –µ –¥–∞ –ø—Ä–µ–¥–ø—Ä–∏–µ–º–µ—à –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–∞, –ø—Ä–µ–¥–∏ —Å–∏–º–ø—Ç–æ–º–∏—Ç–µ –¥–∞ —Å–µ –≤–ª–æ—à–∞—Ç.',
        color: 'text-yellow-500',
        emoji: 'üü°'
      };
    case 'good':
      return {
        title: '–î–æ–±—Ä–æ –Ω–∏–≤–æ',
        description: '–ù–∏–≤–∞—Ç–∞ —Ç–∏ –∏–∑–≥–ª–µ–∂–¥–∞—Ç —Å—Ç–∞–±–∏–ª–Ω–∏, –Ω–æ –∏–º–∞ –º—è—Å—Ç–æ –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ. –ü—Ä–µ–≤–∞–Ω—Ç–∏–≤–µ–Ω –ø–ª–∞–Ω —â–µ —Ç–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –≤ –æ–ø—Ç–∏–º–∞–ª–Ω–∞ —Ñ–æ—Ä–º–∞.',
        color: 'text-green-500',
        emoji: 'üü¢'
      };
  }
}
